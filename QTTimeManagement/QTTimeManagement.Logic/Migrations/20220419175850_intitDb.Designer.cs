// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QTTimeManagement.Logic.DataContext;

#nullable disable

namespace QTTimeManagement.Logic.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20220419175850_intitDb")]
    partial class intitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.CollectiveAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<double?>("HolidaySurcharge")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("MaxOperatingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MaximumBreakDuration")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MinTime30MinBreakAfterBegin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MinTime30MinBreakBeforeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MinWorkingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MinWorkingTimeAfterBegin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MinWorkingTimeBeforeEnd")
                        .HasColumnType("time");

                    b.Property<DateTime?>("NightHoursBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NightHoursEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OverTimeThresholdWeeklyHours")
                        .HasColumnType("int");

                    b.Property<double?>("OvertimeSurchargeBeforeWeeklyHourThreshold")
                        .HasColumnType("float");

                    b.Property<double?>("OvertimeSurchargeWeeklyHours")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("PreperationAndPreworkTime")
                        .HasColumnType("time");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("CollectiveAgreements", "timemanagement");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BeginWorkingWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("TransferVacationDays")
                        .HasColumnType("float");

                    b.Property<double>("WeeklyHours")
                        .HasColumnType("float");

                    b.Property<int>("WorkingDaysPerWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees", "timemanagement");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Holidays", "timemanagement");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<double>("RateAmount")
                        .HasColumnType("float");

                    b.Property<int>("RateType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Rates", "timemanagement");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotCompliant")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NotCompliantNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("ServiceDay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceTemplateId");

                    b.ToTable("Services", "timemanagement");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.ServiceTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Validitydays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Begin")
                        .IsUnique();

                    b.ToTable("ServiceTemplates", "timemanagement");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.TimeBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceTemplateId");

                    b.ToTable("TimeBlocks", "timemanagement");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.Rate", b =>
                {
                    b.HasOne("QTTimeManagement.Logic.Entities.Employee", null)
                        .WithMany("Rates")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.Service", b =>
                {
                    b.HasOne("QTTimeManagement.Logic.Entities.Employee", "Employee")
                        .WithMany("Services")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QTTimeManagement.Logic.Entities.ServiceTemplate", "ServiceTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceTemplateId");

                    b.Navigation("Employee");

                    b.Navigation("ServiceTemplate");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.TimeBlock", b =>
                {
                    b.HasOne("QTTimeManagement.Logic.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("QTTimeManagement.Logic.Entities.ServiceTemplate", "ServiceTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceTemplateId");

                    b.Navigation("Service");

                    b.Navigation("ServiceTemplate");
                });

            modelBuilder.Entity("QTTimeManagement.Logic.Entities.Employee", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
